// Generated by gencpp from file cucumber/msgsRequest.msg
// DO NOT EDIT!


#ifndef CUCUMBER_MESSAGE_MSGSREQUEST_H
#define CUCUMBER_MESSAGE_MSGSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cucumber
{
template <class ContainerAllocator>
struct msgsRequest_
{
  typedef msgsRequest_<ContainerAllocator> Type;

  msgsRequest_()
    : val(0.0)
    , val2(0.0)  {
    }
  msgsRequest_(const ContainerAllocator& _alloc)
    : val(0.0)
    , val2(0.0)  {
  (void)_alloc;
    }



   typedef float _val_type;
  _val_type val;

   typedef float _val2_type;
  _val2_type val2;





  typedef boost::shared_ptr< ::cucumber::msgsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cucumber::msgsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct msgsRequest_

typedef ::cucumber::msgsRequest_<std::allocator<void> > msgsRequest;

typedef boost::shared_ptr< ::cucumber::msgsRequest > msgsRequestPtr;
typedef boost::shared_ptr< ::cucumber::msgsRequest const> msgsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cucumber::msgsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cucumber::msgsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cucumber::msgsRequest_<ContainerAllocator1> & lhs, const ::cucumber::msgsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.val == rhs.val &&
    lhs.val2 == rhs.val2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cucumber::msgsRequest_<ContainerAllocator1> & lhs, const ::cucumber::msgsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cucumber

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cucumber::msgsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cucumber::msgsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cucumber::msgsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cucumber::msgsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cucumber::msgsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cucumber::msgsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cucumber::msgsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81541c8dc4bac0a46b3cb9296575a129";
  }

  static const char* value(const ::cucumber::msgsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81541c8dc4bac0a4ULL;
  static const uint64_t static_value2 = 0x6b3cb9296575a129ULL;
};

template<class ContainerAllocator>
struct DataType< ::cucumber::msgsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cucumber/msgsRequest";
  }

  static const char* value(const ::cucumber::msgsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cucumber::msgsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 val\n"
"float32 val2\n"
;
  }

  static const char* value(const ::cucumber::msgsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cucumber::msgsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.val);
      stream.next(m.val2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msgsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cucumber::msgsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cucumber::msgsRequest_<ContainerAllocator>& v)
  {
    s << indent << "val: ";
    Printer<float>::stream(s, indent + "  ", v.val);
    s << indent << "val2: ";
    Printer<float>::stream(s, indent + "  ", v.val2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUCUMBER_MESSAGE_MSGSREQUEST_H
